var PI=Math.PI,RAD_TO_DEGREE=180/PI;function HyperbolicLine(){this.y0=this.x0=this.r=void 0}function xyToPolar(a,b){b=-b;var d=Math.sqrt(a*a+b*b),e=0;if(!(.999<d))return d=Math.abs(Math.log((1-d)/(1+d))),0===a?0<b?e=PI/2:0>b&&(e=-PI/2):e=Math.atan2(b,a),{radius:d,angle:e}}
function findLine(a,b,d,e){var f=new HyperbolicLine,g;g=2*(b*d-e*a);if(1E-4<=Math.abs(g)){var h=a*a+b*b+1,k=d*d+e*e+1;1E-5<Math.abs(a)?(f.y0=(d*h-a*k)/g,f.x0=(h-2*b*f.y0)/(2*a)):(f.x0=(e*h-b*k)/-g,f.y0=(h-2*a*f.x0)/(2*b));a-=f.x0;b-=f.y0;f.r=Math.sqrt(a*a+b*b)}else a*a+b*b>d*d+e*e?(g=Math.sqrt(a*a+b*b),f.x0=b/g*-1E4,f.y0=a/g*1E4):(g=Math.sqrt(d*d+e*e),f.x0=e/g*-1E4,f.y0=d/g*1E4),f.r=1E4;return f}
function findBoundaryPoints(a,b,d){var e=a*a+b*b;return{x1:(a+d*b)/e,y1:(b-d*a)/e,x2:(a-d*b)/e,y2:(b+d*a)/e}}function findAlphaBeta(a,b,d,e,f,g){a=findAngleOfLine(f,g,a,b);d=findAngleOfLine(f,g,d,e);Math.abs(d-a)>PI&&(a<d?a+=2*PI:d+=2*PI);return{alpha:a,beta:d}}function findAngleOfLine(a,b,d,e){a=1E-5>Math.abs(d-a)?e>b?PI/2:3*PI/2:Math.atan2(e-b,d-a);0>a&&(a=2*PI+a);return a}
function findCircle(a,b,d,e){var f=findLine(a,b,d,e),g=getHyperbolicDistance(a,b,d,e,f),h=find2PointsGivenDistanceFromPonPQ(a,b,g,f),k,l=(h.x1-d)*(h.x1-d)+(h.y1-e)*(h.y1-e);l>(h.x2-d)*(h.x2-d)+(h.y2-e)*(h.y2-e)?(k=h.x1,h=h.y1):(k=h.x2,h=h.y2);var m=findAngleOfLine(a,b,d,e),n=findAngleBetweenTwoVectors(a,b,d,e,k,h)/2,l=Math.sqrt((a-d)*(a-d)+(b-e)*(b-e)),p=a+l*Math.cos(m+n),q=b+l*Math.sin(m+n);isCbetweenPandQ(p,q,d,e,k,h,a,b)?(p=a+l*Math.cos(PI+m+n),q=b+l*Math.sin(PI+m+n)):(p=a+l*Math.cos(PI+(m-n)),
q=b+l*Math.sin(PI+(m-n)));l=findLine(a,b,p,q);b=find2PointsGivenDistanceFromPonPQ(a,b,g,l);Math.abs(e-h)<Math.abs(e-b.y1)&&Math.abs(e-h)<Math.abs(e-e-b.y2)?(a=b.x1,g=b.y1,k=b.x2,h=b.y2):Math.abs(e-b.y1)<Math.abs(e-h)&&Math.abs(e-b.y1)<Math.abs(e-e-b.y2)?(a=k,g=h,k=b.x2,h=b.y2):(a=k,g=h,k=b.x1,h=b.y1);b=9E3;1E-6<Math.abs(e-g)&&(b=-(d-a)/(e-g));a=(e+g)/2-(d+a)/2*b;g=9E3;1E-6<Math.abs(e-h)&&(g=-(d-k)/(e-h));f.x0=((e+h)/2-(d+k)/2*g-a)/(b-g);f.y0=b*f.x0+a;f.r=Math.sqrt((d-f.x0)*(d-f.x0)+(e-f.y0)*(e-f.y0));
return f}function getHyperbolicDistance(a,b,d,e,f){f=findBoundaryPoints(f.x0,f.y0,f.r);var g=a-f.x1,h=b-f.y1;a-=f.x2;b-=f.y2;var k=Math.sqrt(g*g+h*h),l=Math.sqrt(a*a+b*b),g=d-f.x1,h=e-f.y1;a=d-f.x2;b=e-f.y2;return Math.abs(Math.log(k/l/(Math.sqrt(g*g+h*h)/Math.sqrt(a*a+b*b))))}
function find2PointsGivenDistanceFromPonPQ(a,b,d,e){var f,g=findBoundaryPoints(e.x0,e.y0,e.r);f=findAlphaBeta(g.x1,g.y1,g.x2,g.y2,e.x0,e.y0);var h=Math.abs(f.alpha-f.beta),k=a-g.x1;a-=g.x2;var l=b-g.y1;b-=g.y2;k=Math.sqrt(k*k+l*l);b=Math.sqrt(a*a+b*b);a=Math.atan2(Math.sin(h/2),k/b*Math.exp(d)+Math.cos(h/2));h=Math.atan2(Math.sin(h/2),k/b*Math.exp(-d)+Math.cos(h/2));f.beta<f.alpha?(d=f.beta+2*a,f=f.beta+2*h):(d=f.beta-2*a,f=f.beta-2*h);return{x1:e.r*Math.cos(d)+e.x0,y1:e.r*Math.sin(d)+e.y0,x2:e.r*
Math.cos(f)+e.x0,y2:e.r*Math.sin(f)+e.y0}}function findAngleBetweenTwoVectors(a,b,d,e,f,g){d-=a;e-=b;a=f-a;b=g-b;return Math.acos((d*a+e*b)/(Math.sqrt(d*d+e*e)*Math.sqrt(a*a+b*b)))}function isCbetweenPandQ(a,b,d,e,f,g,h,k){d=findAngleBetweenTwoVectors(h,k,f,g,d,e);a=findAngleBetweenTwoVectors(h,k,f,g,a,b);return Math.abs(a)<Math.abs(d)?!0:!1}function findVectorOfTangent(a,b,d){a=b-c.xo;d-=c.yo;b=Math.sqrt(a*a+d*d);return{x:-a/b,y:d/b}}
function findIntersection(a,b,d,e,f,g){var h,k=(e-a)*(e-a)+(f-b)*(f-b);h=Math.sqrt(k);if(h>d+g||d>h+g||g>h+d||1E-5>h)return{p1:{x:void 0,y:void 0},p2:{x:void 0,y:void 0}};e=findAngleOfLine(a,b,e,f);g=(k+d*d-g*g)/(2*h*d);h=Math.atan2(Math.sqrt(1-g*g),g);0>h&&(h=pi+h);g=a+d*Math.cos(e+h);k=b+d*Math.sin(e+h);a+=d*Math.cos(e-h);d=b+d*Math.sin(e-h);b=a*a+d*d;return 1>g*g+k*k?1>b?{p1:{x:g,y:k},p2:{x:a,y:d}}:{p1:{x:g,y:k},p2:{x:void 0,y:void 0}}:1>b?{p1:{x:a,y:d},p2:{x:void 0,y:void 0}}:{p1:{x:void 0,y:void 0},
p2:{x:void 0,y:void 0}}}function findPointOnLineNearP(a,b,d,e,f){e=Math.atan2(f-b,e-a);return{x:a+d*Math.cos(e),y:b+d*Math.sin(e)}}
function findAngle(a,b,d,e,f,g){var h=findLine(d,e,a,b),k=findLine(d,e,f,g),l=getHyperbolicDistance(d,e,a,b,h),m=getHyperbolicDistance(d,e,f,g,k);if(.001>l||.001>m)return 0;a=findAlphaBeta(d,e,a,b,h.x0,h.y0);g=findAlphaBeta(d,e,f,g,k.x0,k.y0);f=a.alpha<a.beta?a.alpha+1E-4:a.alpha-1E-4;g=g.alpha<g.beta?g.alpha+1E-4:g.alpha-1E-4;return findAngleBetweenTwoVectors(d,e,h.r*Math.cos(f)+h.x0,h.r*Math.sin(f)+h.y0,k.r*Math.cos(g)+k.x0,k.r*Math.sin(g)+k.y0)};
